<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>381</string>
	<key>AMApplicationVersion</key>
	<string>2.4</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.string</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>2.0.3</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>COMMAND_STRING</key>
					<dict/>
					<key>CheckedForUserDefaultShell</key>
					<dict/>
					<key>inputMethod</key>
					<dict/>
					<key>shell</key>
					<dict/>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.string</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run Shell Script.action</string>
				<key>ActionName</key>
				<string>Voer shellscript uit</string>
				<key>ActionParameters</key>
				<dict>
					<key>COMMAND_STRING</key>
					<string>home=~/.switchGPU
bin="$home/bin"
tmp="$home/tmp"
logs="$home/logs"
logfile="$logs/logs.txt"

url_gfx="https://github.com/qnxor/macoh/raw/master/gfxCardStatus.tgz"

mkdir -p "$logs" "$tmp" "$bin"

function get_gfx () {
	set -e
	rm -f $bin/done-gfx
	echo "Fetching gfxCardStatus into $bin ..." &gt;&gt; $logfile
	/usr/local/bin/wget -q "$url_gfx" -P $tmp
	[[ -d $bin/gfxCardStatus.app ]] &amp;&amp; rm -rf $bin/gfxCardStatus.app
	tar -C $bin -zxf $tmp/gfxCardStatus.tgz
	rm -f $tmp/gfxCardStatus.tgz
	touch $bin/done-gfx
}

function check_gfx () {
	[[ -r $bin/done-gfx &amp;&amp; -d $bin/gfxCardStatus.app ]] || get_gfx force
}

function gpudetect () {
	local i log pid
	$bin/gfxCardStatus.app/Contents/MacOS/gfxCardStatus &amp;&gt; $logs/gfx.txt &amp;
	pid=$!
	echo "Detecting GPUs ..." &gt;&gt; $logfile
	for ((i=0;i&lt;10;i++)); do
		sleep 1
		log=$(&lt;$logs/gfx.txt)
		if [[ "$log" =~ GPUs\ present:\ \([^\)]+$'\n'\) ]]; then
			log=${log/*GPUs present: (/}
			log=${log/)*/}
			log="${log//[\",]/}"
			local IFS=$'\n'
			log=($log)
			local IFS=$'\n\t '
			if [[ ${#log[*]} -lt 2 ]]; then
				silentkill $pid
				echo "Only one GPU detected. Nothing to switch. Exiting ..." 2&gt;&gt; $logfile
				return 15
			else
				silentkill $pid
				return 0
			fi
		fi
	done
	silentkill $pid
	echo "Timeout waiting for gfxCardStatus." 2&gt;&gt; $logfile
	return 16
}

function silentkill () {
	# Die with dignity. Kill if stubborn.
	# Add brackets ( ) around bg processes so we suppress "stopped" messsages
	( { sleep 0.25; kill -TERM $* &amp;&gt;/dev/null; } &amp; )
	( { sleep 5; kill -KILL $* &amp;&gt;/dev/null; } &amp; )
	# The 'wait' trick only works for subprocess of the current shell, should be fine
	# It suppresses the "terminated" background messages.
	# "wait" returns 127 if process not found (thanks!). We return 0 always.
	wait $* &amp;&gt;/dev/null || return 0
}

function gpuswitch () {
	check_gfx
	gpudetect || return $?
	local i j pid n=3 size gfxlog=$logs/gfx.txt
	echo "Switching GPU to Integrated ..." &gt;&gt; $logfile
	# Need to attempt 2-3 times due to a bug
	# https://github.com/codykrieger/gfxCardStatus/issues/103
	for ((i=1;i&lt;=n;i++)); do
		echo "Switching attempt $i/$n ..." &gt;&gt; $logfile
		# It also doesn't exit, so we need to background it, monitor its log file, then kill it ... 
		touch $gfxlog
		$bin/gfxCardStatus.app/Contents/MacOS/gfxCardStatus --integrated &amp;&gt; $gfxlog &amp;
		pid=$!
		# stop when file size stops increasing
		for ((j=0;j&lt;10;j++)); do
			[[ $j = 0 ]] &amp;&amp; sleep 1 || sleep 1
			size[1]=`wc -c $gfxlog`
			[[ ${size[0]} = ${size[1]} ]] &amp;&amp; break
			size[0]=${size[1]}
		done
		[[ $j = 10 ]] &amp;&amp; Timeout waiting for gfxCardStatus. GPU possibly not switched. &gt;&amp;2
		[ $i != $n ] &amp;&amp; silentkill $pid
	done
	rm -f $gfxlog
	printf "Done. GPU should now be switched to Integrated.\n------------------------\n" &gt;&gt; $logfile
}

echo "$(date)" &gt;&gt; $logfile
killall gfxCardStatus 2&gt;&amp;1
gpuswitch</string>
					<key>CheckedForUserDefaultShell</key>
					<true/>
					<key>inputMethod</key>
					<integer>0</integer>
					<key>shell</key>
					<string>/bin/bash</string>
					<key>source</key>
					<string></string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.RunShellScript</string>
				<key>CFBundleVersion</key>
				<string>2.0.3</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunShellScriptAction</string>
				<key>InputUUID</key>
				<string>B0DCA119-C50B-4DE9-BDF1-D1E8370BBDD9</string>
				<key>Keywords</key>
				<array>
					<string>Shell</string>
					<string>Script</string>
					<string>Commando</string>
					<string>Uitvoeren</string>
					<string>Unix</string>
				</array>
				<key>OutputUUID</key>
				<string>DB1F155A-55F4-45B0-8770-DC4932C307C3</string>
				<key>UUID</key>
				<string>C9621867-0374-4472-89CB-265FA67AC90E</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<integer>0</integer>
						<key>name</key>
						<string>inputMethod</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
					<key>1</key>
					<dict>
						<key>default value</key>
						<string></string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>1</string>
					</dict>
					<key>2</key>
					<dict>
						<key>default value</key>
						<false/>
						<key>name</key>
						<string>CheckedForUserDefaultShell</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>2</string>
					</dict>
					<key>3</key>
					<dict>
						<key>default value</key>
						<string></string>
						<key>name</key>
						<string>COMMAND_STRING</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>3</string>
					</dict>
					<key>4</key>
					<dict>
						<key>default value</key>
						<string>/bin/sh</string>
						<key>name</key>
						<string>shell</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>4</string>
					</dict>
				</dict>
				<key>conversionLabel</key>
				<integer>0</integer>
				<key>isViewVisible</key>
				<true/>
				<key>location</key>
				<string>309.500000:554.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run Shell Script.action/Contents/Resources/Dutch.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<true/>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.application</string>
	</dict>
</dict>
</plist>
